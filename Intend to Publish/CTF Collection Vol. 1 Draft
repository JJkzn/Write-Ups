Hey everyone!

My name is Jake and I'm happy to present my very first CTF write-up! I can't wait to share many more with you all as time goes on along with some other things I have planned but that's not what we're here for today!

While I've done some CTFs in the past, like I said this is my first time providing a write-up for one, so I'd humbly request you grant me some understanding while I grow and develop my skills. ;)

Enough rambling! Let's begin.

====================================================================

CTF Name - CTF Collection Vol. 1 Draft
Platform - TryHackMe 
Link - https://tryhackme.com/r/room/ctfcollectionvol1
CTF Author - DesKel

The Author provides the following note to set some context:

"Just another random CTF room created by me. Well, the main objective of the room is to test your CTF skills. For your information, vol.1 consists of 20 tasks and all the challenges are extremely easy. Stay calm and Capture the flag. :)"

"Note: All the challenges flag are formatted as THM{flag}, unless stated otherwise"

--
So, with this in mind, we're going to be covering a lot of different concepts today and from what we read in the author's note we can assume that this will be a great collection of CTFs for beginners. Perfect for a first write-up - indeed, the main reason I chose it for this.

--

====================================================================


QUESTION 1:

Can you decode the following?

VEhNe2p1NTdfZDNjMGQzXzdoM19iNDUzfQ==

Now while this might appear like a bunch of gibberish, it's likely that we have an encrypted string here. A fantastic online resource for decoding data like this can be found at - https://gchq.github.io/CyberChef/.
Our next step was to run the string through the previously mentioned CyberChef tool. CyberChef provides a wide range of operations it can perform on input you give it but a good place to start off is with a data format such as Base64. 
Running the string of characters through CyberChef with the "From Base64" operation applied gives us the following output: THM{ju57_d3c0d3_7h3_b453}

Looks like we've found our first flag.

Decoding data won't usually be this simple but this question serves as an excellent example on how data can be encoded and decoded.

As a little side note, sometimes when we are given encoded data it will actually be encoded multiple times! In these instances a single decoding operation won't be enough to reveal the decoded data.

====================================================================

QUESTION 2:

"Meta! meta! meta! meta..................................."

We are given a task file to download and a hint.

Task File = Find_me_1577975566801.jpg
Hint = EXIF tool

First of all, because of the mention of the word meta, I assumed that the answer would be related to metadata. I quickly opened the file in a text editor and searched for the string "thm", which led to the discovery of the flag - THM{3x1f_0r_3x17}.

I also looked at the hint after this (maybe I should have done that first, in retrospect) so decided use the chance to run the .jpg file through ExifTool, a widely used application that can easily pull a ton of metadata from a file, displayed into an easily readable format. 
(MAYBE DO THIS IN KALI AND PROVIDE COMMAND - EITHER WAY MAKE SURE TO INSERT THE SCREENSHOT OF THE EXIFTOOL RESULTS IN THE FINAL MARKDOWN FILE.)


====================================================================

QUESTION 3:

"Something is hiding. That's all you need to know."

We are given a task file again and another hint.
This time we make sure to read the hint first!

Hint = Steghide

We can assume that the steganography tool Steghide will be key to solving this question.
For those who don't know, steganography is a technique used to conceal some kind of data, such as an image or message, within another file, e.g. a text file hidden within a .jpg image.

I am running my own Kali VM so I install it on that but you can install the tool on any Unix system with:  sudo apt install steghide

*NOTE - If you are getting an error when trying to install steghide via Linux such as: "E: Unable to locate package steghide" then you likely need to update your package index with the command: sudo apt update



I copy the task file over and run the following command in my terminal: steghide extract -sf Extinction_1577976250757.jpg

In this command we are asking steghide to extract hidden data from the file Extinction_1577976250757.jpg via the -sf flag.

We are prompted for a passphrase, and usually in CTFs we would have had to obtain that passphrase through other means, but in this beginner's CTF collection we find that entering nothing for the passphrase allows us to extract the hidden data, "Final_message.txt".

This .txt file contains the following:

It going to be over soon. Sleep my child.

THM{500n3r_0r_l473r_17_15_0ur_7urn}


====================================================================

QUESTION 4:

"Huh, where is the flag?"

Hint = Highlight the text or check the html.

With the hint in mind, we highlight the text to find the following: Huh, where is the flag? THM{wh173_fl46}
Selecting this and viewing the source shows that the RGB values for the text and background section of the flag were all set to 255, rendering it white. Highlighting the area revealed it to us.

Very easy one, but viewing the page source of html pages is a great habit to pick up when enumerating web apps. Sometimes web developers will leave behind important information or even credentials that can be used to establish footholds in engagements.

====================================================================

Question 5:

"Such technology is quite reliable."

Task file that we download is a QR code. We run the QR code through an online code reader - https://qrcoderaptor.com/
The result is our flag: THM{qr_m4k3_l1f3_345y}

Always be careful when dealing with unknown QR codes. (Obviously this one was safe.)

====================================================================

Question 6:

"Both works, it's all up to you."

I originally found the flag for this question via just reading the file with the cat command but I knew there had to be another way of doing it (the title of the question is a telling "Reverse it or read it?") and I didn't want to move on without taking the chance to fill in my gap in knowledge.

So I began to research!

First of all, I've never heard of a .hello file extension and research confirms that it must be something else. Using the 'file' command on the downloaded task file we find out that it's actually and ELF 64-bit file.
ELF = Executable and Linkable Format i.e. an executable file like Windows .exe files.
[INSERT SCREENSHOT HERE]

As we know the title of the question has the word "Reverse" in it, I decided to look at the "Reverse Engineering" section of applications on my Kali VM. A tool named "radare2" with the description "Advanced commandline hexadecimal editor, disassembler and debugger" stood out and I began to look into some ways to use the tool. It turns out one of the many things we can do with this tool is list strings:

r2 question6.hello
izz
{INSERT SCREENSHOT HERE TO ILLUSTRATE THE RADARE2 CLI}

And with this we also obtain the flag!

Radare2 isn't a tool I've ever came across before and I hope to get the chance to delve further into this tool in the future, but anything else right now would be out of the scope of this write up!


====================================================================

QUESTION 7:

Can you decode it?

3agrSy1CewF9v8ukcSkPSYm3oKUoByUpKG4L

Hint: base58

Easy one to run through CyberChef again

Answer - THM{17_h45_l3553r_l3773r5}

====================================================================

QUESTION 8:

Left, right, left, right... Rot 13 is too mainstream. Solve this

MAF{atbe_max_vtxltk}

Hint: Ceaser cipher

We try ROT 13 brute force on CyberChef and get the flag as one of the possible combinations - THM{hail_the_caesar}

====================================================================

QUESTION 9

No downloadable file, no ciphered or encoded text. Huh .......

Hint: Check the html

We open the inspector console and check the html section for this question. We find the flag with it's display set to none which prevented us from seeing it:

(INSERT SCREEN HERE OF INSPECTOR RESULT)






